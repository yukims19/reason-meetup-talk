#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_EXTRA_CSS: /Users/s/Desktop/reactiveconf/talk.css
#+REVEAL_THEME: league
#+REVEAL_TRANS: linear
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_DEFAULT_FRAG_STYLE: appear
#+OPTIONS: reveal_title_slide:nil num:nil reveal_history:true toc:nil

* ReasonML. In Production. For a Junior Dev. A inconsistent and difficult talk.

Yuki Li [[https://twitter.com/yukims19][@yukims19]]

Sean Grove [[https://twitter.com/sgrove][@sgrove]]

Work on [[https://twitter.com/onegraphio][onegraphio]]

* x's narrative, as old as time
Where ~X~ could be: #{ReasonML, Elm, Haskell, Clojure, Scheme}
#+ATTR_REVEAL: :frag appear
 - First encounter: WTF?! why?!?!
 - Grudging acceptance

 - Over-application
 - Disgruntled hermit

#+REVEAL: split

This is one such story

#+REVEAL: split

Meet our protagonist, Yuki.

* Yuki: A junior developer, fresh out of university
- Graduated UCSD in July, 2018
  - Cognitive Science, with a specialization in HCI
- Two previous internships
  - PayGarden: Clojure developer, building web services
  - GeneralForensics: Python, web-scraping
- Full-time programmer, including hobbies and side projects for ~8 months
- First project in Reason ~4 months ago

* Act 1: My idyllic village life of a junior developer

#+REVEAL: split

Our hero's first serious project

** Spendbot
- Read transactions from Brex (credit card for startups)
- Post transaction in Slack channel for company transparency
- Notify manager and ask for details if above some threshold

#+REVEAL: split

[[./images/spendbot_preview.png]]

*** Version 1.0
- Written in pure JS: Node.js talking to Postgres on the backend
- React.js + Apollo on the frontend
- Workers + Redis-based queue (kue.js)
- Hosted on Heroku


#+REVEAL: split

Ship to a customer

#+REVEAL: split

... the customer pays us!

#+REVEAL: split

...

* Act 2: Tragedy, in which our hero's village is burned to the ground

** "Production": an unforgiving land
Long story short:
- Bugs
  - Async values (promises)
  - Bad assumptions
- Hard to refactor
#+REVEAL: split

(in a badass voice)
#+BEGIN_QUOTE
In JavaScript, there is no safety except the safety we guarantee ourselves
#+END_QUOTE


#+REVEAL: split

I shipped bugs to production.

Customers saw buggy behavior.

Senior developers had to debug in production.
#+REVEAL: split

My life is over.

I have just done the worst thing in the world.

How can I recover from this mistake?


* Act 3: Regroup, Recover, Rebuild (in Reason)


#+REVEAL: split

We have to make Spendbot "production ready."

#+REVEAL: split

Enter, ReasonML

[[./images/reason_logo.png]]


#+REVEAL: split

Demand to use Reason for v2 was given from senior developer.

I had no choice.

#+REVEAL: split

The pitch:

- You need training wheels.
- Reason is going to hurt
- You won't like it

#+REVEAL: split
#+BEGIN_QUOTE
"But I will feel more comfortable working with you in Reason" - Sean Grove
#+END_QUOTE

#+REVEAL: split
In time, you will become a master.

[[./images/amazing_monk.jpeg]]

#+REVEAL: split

Let me recap my first professional experience with Reason for you now.

#+REVEAL: split

Warning: Sean was right.

#+ATTR_REVEAL: :frag appear
It was painful.
#+ATTR_REVEAL: :frag appear
I did not like it.
*** First moments with Reason
Step 1: Install the Reason toolchain.

- I _still_ don't know what we did, exactly
- Spent more than _half the day_ setting up a dev environment, including
  - One (emacs) environment for the backend
  - One (emacs) environment for the frontend
  - They're separate for some reason.

#+REVEAL: split

Would not have persisted by myself, but it's just a one-time setup.

#+ATTR_REVEAL: :frag appear
Also, I didn't have a choice in the matter.
#+ATTR_REVEAL: :frag appear
Now, my training begins.


*** Training stage 1: Types
First thing's first in Reason: Start defining your types.

- Lots of extra keyboarding
- Worked with Java awhile ago, so it's not _too_ bad. "Type inference"?

#+REVEAL: split

Not feeling like a master yet.

Maybe tomorrow will be better?


*** Training stage 2: Bindings
"Reason works with JavaScript libraries!"

- Tried to use ~ant-design~, one of the most popular React UI component frameworks
- BS bindings?! For that!? What are BS binding?

#+REVEAL: split

Fine, fine. I'll learn!

(Deadline in a week...)

*** Training stage 3: EVERYTHING ELSE 

- Reason native
  - Where did ~Js.*~ go?!
  - Where did ~graphql_ppx~ go?!
- ~opam~ switches
  - opam killed my laptop?
- ...GADTs ocaml-graphql-server... ðŸ˜±

#+REVEAL: split

 ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜± ðŸ˜±

#+REVEAL: split
Completely overwhelmed.

Don't even know how to phrase the questions I need to get answers.

#+REVEAL: split
Calm down. Phew....

** Junior developer needs and Reason
- Demonstrate value
  - Ship product (quickly)
- Grow as a developer
  - Experiment and iterate quickly
  - Learn new things quickly
- Medium/Long-term stability
  - Develop transferable skills quickly

#+REVEAL: split

Less... [[./images/amazing_monk.jpeg]]

...more [[./images/janitor.jpg]]


* Short interlude with Sean

- Junior developers put tremendous pressure on themselves
[[./images/too_busy.jpg]]
#+REVEAL: split

- Experiencing (painful) failure is important
- ... in controlled environments

#+REVEAL: split

- The company proved a hypothesis quickly, that's a win

* Act 4: 1 month later, the return of Yu-killa

#+REVEAL: split
As approach the shipping stage,

I remember the nightmare of V1 Spendbot.


#+REVEAL: split
Now,

I've come to appreciate the power of Reason more and more!

** Exhaustive pattern matching
Discover edge cases never realized before
** Nominal type checking (ex. Person -vs- Pet)
Confident on data type

- With structual typing:

#+BEGIN_SRC <json>
Person = {
name: "John"
age: 25
weight: 130
}
#+END_SRC

-vs-

#+BEGIN_SRC <json>
Pet = {
name: "Rover"
age: 63
kind: "dog"
}
#+END_SRC

- ~name~ and ~age~ are same substructure, but refer to different things
#+REVEAL: split
- Possible to pass ~Pet~ when I meant ~Person~... human years vs dog years is going to be hard to debug!

** Short feedback loop
- Understanding coding style
- Fix mistakes in earlier stage

** Better communication and collaboration

#+REVEAL: split

As project scales up
- Hardly remember everything in the project
- Nervous when someone touches my code

#+REVEAL: split

With Reason
- Fix broken part while editing through
- Understand function logic by inspecting data structures in-editor

#+REVEAL: split

Coding collaboration MUCH MUCH easier!

** Junior developer needs and Reason, revisited
- Demonstrate value
  - Ship product quickly
  - _Ship product reliably_

- Grow as a developer
  - Experiment and iterate quickly
  - Learn new things quickly
  - _Communicating my thoughts_
  - _Revising the code_

- Medium/Long-term stability
  - Develop transferable skills
    - Language
    - _Way of thinking_

#+REVEAL: split

> Would I build a new product with Reason today without any outside pressure?
#+REVEAL: split
.... *maybe* yes?
#+ATTR_REVEAL: :frag appear
- Disadvantage: Lack of resources
- Advantage: Easy refactoring & layering on new code with confidence and happiness
- Advantage > Disadvantage (especially in long term)


* Closing thoughts by Sean
* x's narrative, as old as time
Where ~X~ could be: #{ReasonML, Elm, Haskell, Clojure, Scheme}
#+ATTR_REVEAL: :frag appear
 - First encounter: WTF?! why?!?!
 - Grudging acceptance

 - +Over-application+
 - +Disgruntled hermit+

** Mentoring: Get over first encounter
[[./images/initial.png]]
- Cajoling
- Threats
- Appeals to authority

#+REVEAL: split
[[./images/reduced.png]]

- Reduce activation energy required
- Find intermediate wins
- Plan a (fairly) safe path

** Mentoring: Prevent disgruntled hermits
- Show the painful parts with a cheerful attitude
- Demonstrate the tradeoffs of the technology yourself
- OneSQL

* Bonus: SpotDJ!
